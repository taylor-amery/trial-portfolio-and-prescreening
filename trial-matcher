<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Trial Matcher</title>
    <style>
        body { font-family: Arial, sans-serif; padding: 20px; max-width: 800px; margin: auto; }
        .card { border: 1px solid #ccc; padding: 20px; border-radius: 10px; box-shadow: 2px 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .button { background-color: #007bff; color: white; padding: 10px; border: none; cursor: pointer; margin-top: 10px; }
        .button:disabled { background-color: #ccc; cursor: not-allowed; }
        .treatment { display: inline-block; padding: 8px; border: 1px solid #ccc; margin: 5px; cursor: pointer; border-radius: 5px; }
        .selected { background-color: #007bff; color: white; }
        ul { padding: 0; list-style: none; }
        li { padding: 8px; border: 1px solid #ddd; margin-top: 5px; border-radius: 5px; background: #f8f8f8; }
    </style>
</head>
<body>
    <div class="card">
      <a href="index.html" class="button">Return to Main Page</a>
        <h2 align="center">Trial Matcher</h2>
        <h3>Select Prior Treatments</h3>
        <div id="treatmentList"></div>
        <button class="button" onclick="matchTrials()">Find Matching Trials</button>
    </div>
    
    <div class="card">
        <h3>Matching Trials</h3>
        <ul id="matchingTrials"></ul>
    </div>
    
    <script>
        let selectedTreatments = new Set();
        let trials = JSON.parse(localStorage.getItem("trials")) || [];

        function updateTreatmentList() {
            let treatments = new Set();
            trials.forEach(trial => trial.treatments.forEach(t => treatments.add(t)));
            
            const treatmentList = document.getElementById("treatmentList");
            treatmentList.innerHTML = "";
            treatments.forEach(treatment => {
                let span = document.createElement("span");
                span.className = "treatment";
                span.innerText = treatment;
                span.onclick = () => {
                    if (selectedTreatments.has(treatment)) {
                        selectedTreatments.delete(treatment);
                        span.classList.remove("selected");
                    } else {
                        selectedTreatments.add(treatment);
                        span.classList.add("selected");
                    }
                };
                treatmentList.appendChild(span);
            });
        }

        function matchTrials() {
            const matchingList = document.getElementById("matchingTrials");
            matchingList.innerHTML = "";
            
            trials.forEach(trial => {
                let matches = trial.rules.every(rule => {
                    let selected = Array.from(selectedTreatments);
                    let ruleTreatments = rule.treatments;
                    
                    if (rule.type === "must") {
                        return ruleTreatments.every(t => selected.includes(t));
                    } else if (rule.type === "must-not") {
                        return ruleTreatments.every(t => !selected.includes(t));
                    } else if (rule.type === "at-least-one") {
                        return ruleTreatments.some(t => selected.includes(t));
                    } else if (rule.type === "at-most-one") {
                        return ruleTreatments.filter(t => selected.includes(t)).length <= 1;
                    }
                    return false;
                });
                
                if (matches) {
                    let li = document.createElement("li");
                    li.innerText = trial.name + ": " + trial.description;
                    matchingList.appendChild(li);
                }
            });
        }

        updateTreatmentList();
    </script>
</body>
</html>
